---
- name: install MySQL
  ansible.builtin.apt:
    name: mysql-server
    state: present

- name: Manage mysql host
  ansible.builtin.template:
    src:  override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
    mode: '0644'
  notify: Restart mysql


- name: install PyMySQL
  ansible.builtin.apt: 
    name: python3-pymysql
    state: present

- name: Restart sql server
  meta: flush_handlers


- name: Create MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: MySQL user
  community.mysql.mysql_user:
    host: "%"
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    priv: "{{ mysql_database }}.*:ALL"
  no_log: true



- name: Make sure mysql is running
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true




#Exporter tasks



- name: MySQL Exporter User
  community.mysql.mysql_user:
    name: "{{ mysql_exporter_user }}"
    password: "{{ mysql_exporter_pass }}"
    priv: "*.*:PROCESS, REPLICATION CLIENT, SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: MySQL Exporter Config
  template:
    src: my.cnf.j2 
    dest: /var/lib/prometheus/.my.cnf
    owner: prometheus
    group: prometheus
    mode: 0644
  notify: Restart MySQL Exporter
  no_log: True


- name: Install MySQL Exporter
  apt:
    name: prometheus-mysqld-exporter

- name: Enable MySQL Exporter
  service:
    name: prometheus-mysqld-exporter
    state: started
    enabled: yes

# Replica Lab
   

- name: Add mysql replication user
  community.mysql.mysql_user:
    name: "{{ mysql_replication_username }}"
    password: "{{ mysql_replication_password }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock 
  no_log: true

- name: Configure mysql dynamic variables for replica
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica



# configure backup process for mysql

- name: Create backup directory for mysql
  file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    group: backup
    mode: 0755 # Readable and writable by owner, readable by group and others

- name: Create mysql backup user
  community.mysql.mysql_user:
    name: "{{mysql_backup_user}}"
    password: "{{mysql_backup_password}}"
    host: "localhost"     # Only allow local connections
    resource_limits:
      MAX_USER_CONNECTIONS: 3
    priv: "agama.*:SELECT,LOCK TABLES" #backup can only read. Root can write and read
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Create backup user credentials to access mysql
  template:
    src: backup_my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: 0600  # Readable only by owner
  no_log: true

- name: Create scheduled mysql backup task with cron
  template:
    src: cron-mysql-backup.j2
    dest: /etc/cron.d/mysql-backup
    

# Add cname records for mysql servers
- name: add cnames
  include_role:
    name: "cname"
  vars:
    service: "mysql{{inventory_hostname | replace('akhkusu','')}}"